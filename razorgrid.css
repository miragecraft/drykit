/*  RazorGrid v3.0.2
    https://www.miragecraft.com
    Licensed under MIT Open Source */

html {box-sizing:border-box} *,*:before,*:after {box-sizing:inherit}

/* grid */
[class*=grid] {
    display: flex; flex-wrap: wrap;

    --gx: var(--gap-x, var(--gap, 0px));
    --gy: var(--gap-y, var(--gap, 0px));

    margin-inline-start: calc(var(--gx) * -1);
    margin-block-start:  calc(var(--gy) * -1);

    --full-1: max((var(--s) - 1) * (var(--s) - 1) * -10000 + 1, 0);
    --full-0: min((var(--s) - 1) * (var(--s) - 1) *  10000,     1);

    --x-full: calc((var(--s) - 1) / (var(--s) - 1));

    --full-not-0: max(var(--s) - 0.999, 0);
    --o-full:     calc(var(--full-not-0) / var(--full-not-0));

    height: calc(var(--h) + var(--gy));
    width:  calc(var(--w) + var(--gx));
}
.grid-y {flex-direction:column}

[class*=grid] > * {
    flex-shrink: 1;
    flex-grow:   calc(var(--s) + 1);

    --x-auto:    calc((var(--s)) / (var(--s)));
    --x-shrink:  calc((var(--s) + 1) / (var(--s) + 1));

    --auto-span: calc(99.999% * var(--s) - var(--g));
    flex-basis:  calc(var(--auto-span) * var(--x-shrink));
    --max-span:  calc(var(--auto-span) * var(--x-shrink) * var(--x-auto));

    /* container query */
    --auto-break: calc((var(--breakpoint, 0px) - 100%) * 999);
    --min-span:   clamp(1px, var(--auto-break), 100% - var(--g));

    --auto-offset: calc(99.999% * var(--o) * var(--full-0) + var(--g));
    margin-inline-start: var(--gx);
    margin-block-start:  var(--gy);
    
    order: calc(var(--v-order, var(--order, 0)) * var(--full-1) + var(--order, 0) * var(--full-0));    

    /* should apply to all element, placed here due to Chrome bug */
    display: var(--d, revert);

    position:relative;
    
    left: calc(var(--x) * var(--x-full));
    top:  calc(var(--y) * var(--x-full));
}
.grid-x > * {
    --g: var(--gx);
    max-width: var(--max-span);
    min-width: var(--min-span);
    margin-inline-start: var(--auto-offset);
}
.grid-y > * {
    --g: var(--gy);
    max-height: var(--max-span);
    min-height: var(--min-span);
}

* {
    font-size: var(--fs, revert);
    text-align: var(--a, revert);
}

[class*=grid] > * > :first-child:not([class*=grid]) {margin-block-start: 0!important}
[class*=grid] > * > :last-child {margin-block-end: 0!important}

/* alignment */
[class*=grid] {align-content:   var(--ag)}
.grid-x       {justify-content: var(--ax); align-items: var(--ay)}
.grid-x > *   {align-self:      var(--ay)}
.grid-y       {justify-content: var(--ay); align-items: var(--ax)}
.grid-y > *   {align-self:      var(--ax)}

/* resets */
:where([class*=grid])  {
    --span:   initial; --so-span: initial;
    --m-span: initial; --mo-span: initial;
    --l-span: initial;

    --offset:   initial; --so-offset: initial;
    --m-offset: initial; --mo-offset: initial;
    --l-offset: initial;

    --display:   initial; --so-display: initial;
    --m-display: initial; --mo-display: initial;
    --l-display: initial;

    --align-grid:   initial; --so-align-grid: initial;
    --m-align-grid: initial; --mo-align-grid: initial;
    --l-align-grid: initial;

    --w: initial; --h: initial;
    --x: initial; --y: initial;

    --order: initial; --v-order: initial;
}

:where([class*=grid], [class*=grid] > *) {
    --align-x:   initial;   --so-align-x: initial;
    --m-align-x: initial;   --mo-align-x: initial;
    --l-align-x: initial;

    --align-y:   initial;   --so-align-y: initial;
    --m-align-y: initial;   --mo-align-y: initial;
    --l-align-y: initial;
}

/* small */
[class*=grid] > *, [class*=grid] {
    --s:  var(--so-span,       var(--span, 0));
    --ax: var(--so-align-x,    var(--align-x));
    --ay: var(--so-align-y,    var(--align-y));
}
[class*=grid] > * {
    --o:  var(--so-offset,     var(--offset, 0));
    --ag: var(--so-align-grid, var(--align-grid));
}
* {
    --a:  var(--so-align,      var(--align));
    --d:  var(--so-display,    var(--display));
    --fs: var(--so-size,       var(--size));
}
/* medium */
@media only screen and (min-width: 640px) {
    [class*=grid] > *, [class*=grid] {
        --s:  var(--mo-span,       var(--m-span,       var(--span, 0)));
        --ax: var(--mo-align-x,    var(--m-align-x,    var(--align-x)));
        --ay: var(--mo-align-y,    var(--m-align-y,    var(--align-y)));
    }
    [class*=grid] > * {
        --o:  var(--mo-offset,     var(--m-offset,     var(--offset, 0)));
        --ag: var(--mo-align-grid, var(--m-align-grid, var(--align-grid)));
    }
    * {
        --a:  var(--mo-align,      var(--m-align,      var(--align)));
        --d:  var(--mo-display,    var(--m-display,    var(--display)));
        --fs: var(--mo-size,       var(--m-size,       var(--size)));
    }
}

/* large */
@media only screen and (min-width: 1024px) {
    [class*=grid] > *, [class*=grid] {
        --s:  var(--l-span,       var(--m-span,       var(--span, 0)));
        --ax: var(--l-align-x,    var(--m-align-x,    var(--align-x)));
        --ay: var(--l-align-y,    var(--m-align-y,    var(--align-y)));
    }
    [class*=grid] > * {
        --o:  var(--l-offset,     var(--m-offset,     var(--offset, 0)));
        --ag: var(--l-align-grid, var(--m-align-grid, var(--align-grid)));
    }
    * {
        --a:  var(--l-align,      var(--m-align,      var(--align)));
        --d:  var(--l-display,    var(--m-display,    var(--display)));
        --fs: var(--l-size,       var(--m-size,       var(--size)));
    }
}

/* 100% height support */
html {
    height:100%;
    display: flex;
    flex-direction:column;
}
body {
    width:100%;
    flex-grow:1;
    flex-basis:0;
}
html, body {margin:0;padding:0;}

/* shortcuts */
/* full height */
.stretch {
    --h:100%;
}

/* full height when not collapsed */
.elastic {
    --h:100% * var(--x-full);
}

/* overlay item over parent grid */
.overlay {
    position:absolute;
    width:100%; height:100%;
    max-width:none;
}

/* reverse container query folding order */
.backfold {flex-direction:row-reverse}
.backfold > :nth-child(1) {order:-1}
.backfold > :nth-child(2) {order:-2}
.backfold > :nth-child(3) {order:-3}
.backfold > :nth-child(4) {order:-4}
.backfold > :nth-child(5) {order:-5}
.backfold > :nth-child(6) {order:-6}
.backfold > :nth-child(7) {order:-7}
.backfold > :nth-child(8) {order:-8}
.backfold > :nth-child(9) {order:-9}
.backfold > :nth-child(10) {order:-10}
.backfold > :nth-child(11) {order:-11}

/* general quality of life */
html {-webkit-text-size-adjust: 100%}

/* Nested Flexbox whitespace fix - disable grid-y wrap, remove inherited gap-x */
.grid-y {flex-wrap:nowrap;--gx:0}

/* presets */
/* shrink header and footer */
:where(.grid-y > :is(header, footer)) {
    --span:-1;
}

/* font size, necessary for Chrome due to bug 1142504 */
h1 {--size:1.6rem}
h2 {--size:1.35rem}
h3 {--size:1.25rem}
h4 {--size:1.1rem}
h5 {--size:1rem}
h6 {--size:.9rem}

sub, sup, small {--size:smaller}
big {--size:larger}

/* auto-folding */
:where(.grid-x .grid-x) {--mo-span:1}
:where(.grid-x) {--so-span:1}

/* prevent auto-folding */
:where(.lock, .lock .grid-x) {--so-span: initial; --mo-span: initial}