/* ------*/
/* space */
/* ------*/

:not([hidden], style, script, template, link) {

  --_space: var(--space-x,
            var(--space-y,
            var(--space-i,
            var(--space-k
          ))));

  --_space-1: var(--_space);
  --_space-2: initial;

  @container style(--_space) {

    --space-x: initial;
    --space-y: initial;
    --space-i: initial;
    --space-k: initial;

    /* reset vendor margins */
    margin:0;

    @container style(--_space-1: var(--_space)) {
      --_space-1: inherit;
      --_spacing-root: var(--_space-1);
      --_space-2: var(--_space);
    }

    @container style(--_space-2: var(--_space)) {
      --_space-2: inherit;
      --_spacing-root: var(--_space-2);
      --_space-1: var(--_space);
    }

    --spacing: var(--_spacing-root);
    /* accept both number and length */
    --_spacing-number: calc(var(--spacing));
    --_spacing-length: calc(var(--spacing));
    --_spacing: calc(
      var(--_spacing-length) + 
      var(--_spacing-number) * var(--_spacing-root));

    & ~ & {
      @container style(--space-x) {margin-left: var(--_spacing)}
      @container style(--space-y) {margin-top: var(--_spacing)}
      @container style(--space-i) {margin-inline-start: var(--_spacing)}
      @container style(--space-k) {margin-block-start: var(--_spacing)}
    }
    @media (scripting:enabled) {
      noscript:first-child + & {margin: 0}
    }
  }
}

@property --_spacing-number {
  syntax: "<number>";
  inherits:false;
  initial-value:0;
}
@property --_spacing-length {
  syntax: "<length-percentage>";
  inherits:false;
  initial-value:0px;
}

/* -------*/
/* divide */
/* -------*/

:not([hidden], style, script, template, link) {

  --_divide:var(--divide-x,
            var(--divide-y,
            var(--divide-i,
            var(--divide-k
          ))));

  --_divide-1: var(--_divide);
  --_divide-2: initial;

  @container style(--_divide) {

    --divide-x: initial;
    --divide-y: initial;
    --divide-i: initial;
    --divide-k: initial;

    @container style(--_divide-1: var(--_divide)) {
      --_divide-1: inherit;
      --divider: var(--_divide-1);
      --_divide-2: var(--_divide);
    }

    @container style(--_divide-2: var(--_divide)) {
      --_divide-2: inherit;
      --divider: var(--_divide-2);
      --_divide-1: var(--_divide);
    }

    & ~ & {
      @container not style(--divide-reverse:true) {
        @container style(--divide-x) {border-left: var(--divider)}
        @container style(--divide-y) {border-top: var(--divider)}
        @container style(--divide-i) {border-inline-start: var(--divider)}
        @container style(--divide-k) {border-block-start: var(--divider)}
      }
      @container style(--divide-reverse:true) {
        --divide-reverse:initial;
        @container style(--divide-x) {border-right: var(--divider)}
        @container style(--divide-y) {border-bottom: var(--divider)}
        @container style(--divide-i) {border-inline-end: var(--divider)}
        @container style(--divide-k) {border-block-end: var(--divider)}
      }
    }
    @media (scripting:enabled) {
      noscript:first-child + & {border: revert-layer}
    }
  }
}